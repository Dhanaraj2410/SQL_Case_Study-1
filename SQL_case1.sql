create database case1

use case1

select * from fact

select * from product

select * from location

/*1. Display the number of states present in theLocationTable.*/

select count(distinct state) as Total_state from location

/* 2. How many products are of regular type?*/

select count(*)as Total_Regular from Product where Type='Regular'

/*3. How much spending has been done on marketing of product ID1?*/

select sum(marketing) as Total_marketing from fact where productid=1

/*4. What is the minimum sales of a product?*/

select min(sales) as min_seles from fact

/*5. Display the max Cost of Good Sold (COGS).*/

select max(cogs)as max_cogs from fact

/*6. Display the details of the product where product type is coffee.*/

select * from product where product_type = 'coffee'

/*7. Display the details where total expenses are greater than 40.*/

select * from fact where total_Expenses > 40

/*8. What is the average sales in area code 719?*/

select Avg(sales) as Avg_Sales from fact where area_code=719
 
/*9. Find out the total profit generated by Colorado state.*/

select sum(profit) as Total_profit 
from fact f join location l on
f.area_code = l.area_code
where l.state='colorado'

/*10. Display the average inventory for each product ID.*/

select productid, avg(inventory) as avg_inventory from fact group by productid

/*11. Display state in a sequential order in a LocationTable.*/

select distinct state from location order by state

/*12. Display the average budget of the Product where the average budget
 margin should be greater than 100.*/

 select productid, avg(budget_margin) as avg_margin
 from fact group by productid
 having avg(budget_margin)>100

/*13. What is the total sales done on date 2010-01-01?*/

 select sum(sales)as Total_sales from fact where date='2010-01-01'

/*14. Display the average total expense of each product ID on anindividual date.*/

select productid,date,avg(total_expenses)as avg_expense
from fact
group by productid,date

/*15. Display the table with the following attributes such as date, productID,
 product_type, product, sales, profit, state, area_code.*/

select f.date,f.productid,p.product,p.product_type,f.sales,
f.profit,l.state,f.area_code from fact f
join product p on f.productid = p.productid
join location l on f.area_code = l.area_code

/*16. Display the rank without any gap to show the sales wiserank.*/

select *,dense_rank() over(order by sales desc)as sales_rank from fact

/*17.Find the state wise profit and sales.*/

select l.state,sum(f.profit) as total_profit, sum(f.sales)
as total_sales from fact f join location l on 
f.area_code = l.area_code group by l.state

/*18.Find the state wise profit and sales along with the productname.*/

select l.state,p.product,sum(f.profit) as total_profit, sum(f.sales)
as total_sales from fact f
join product p on f.productid = p.productid
join location l on f.area_code = l.area_code
 group by l.state,p.product

/*19.If there is an increase in sales of 5%, calculate the increasedsales.*/
 
select productid,sales,sales*1.05 as increased_sales from fact

/*20. Find the maximum profit along with the product ID and producttype.*/

select top 1 f.productid,p.product_type,f.profit from fact f
join
product p on f.productid = p.productid order by f.profit desc

/*21. Create a stored procedure to fetch the result according to theproduct type
 from ProductTable.*/

 create procedure get_products @product_type varchar(50)
 as
 begin
 select * from product where product_type=@product_type
 end

 exec get_products 'coffee'

/*22. Write a query by creating a condition in which if the total expenses isless than
 60 then it is a profit or else loss.*/

select *,case
when total_expenses < 60 then 'profit'
else 'loss' end as status from fact

/*23. Give the total weekly sales value with the date and product IDdetails. Use
 roll-up to pull the data in hierarchical order.*/

select datepart(week,date)as week_number,productid, sum(sales)
as total_weeklysales from fact 
group by rollup(datepart(week,date),productid)

/*24. Apply union and intersection operator on the tables which consistof
 attribute area code.*/

select distinct area_code from location
union
select distinct area_code from fact

select distinct area_code from location
intersect
select distinct area_code from fact

/*25. Create a user-defined function for the product table to fetch aparticular
 product type based upon the user’s preference.*/

create function dbo.getproductsbytype(@producttype varchar(50))
returns table
as
return
(
    select *
    from product
    where lower([product_type]) = lower(@producttype)
)

select * from dbo.getproductsbytype('coffee')

/*26. Change the product type from coffee to tea where product ID is 1and undo it.*/

update product
set [product_type] = 'tea'
where productid = 1

update product
set [product_type] = 'coffee'
where productid = 1

/*27. Display the date, product ID and sales where total expensesare
 between 100 to 200.*/

select date, productid, sales
from fact
where [total_expenses] between 100 and 200

/*28. Delete the records in the Product Table for regulartype.*/

delete from product where type = 'regular'

/*29. Display the ASCII value of the fifth character from the columnProduct.*/

select product, ascii(substring(product, 5, 1)) as fifth from product


